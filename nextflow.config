/*
 * -------------------------------------------------
 *  nf-core/rnafusion Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  container = 'nfcore/rnafusion:1.0' // Container slug. Stable releases should specify release tag!
  container_version = '1.0'
  custom_config_version = 'master'
  igenomesIgnore = false
  genome = false
  test = false

  // Pipeline params
  read_length = 101
  star_fusion = false
  fusioncatcher = false
  fc_extra_options = ''
  fusion_inspector = false
  ericscript = false
  pizzly = false
  pizzly_k = 31
  squid = false
  tool_cutoff = 2

  // Defaults
  help = false
  reads = "data/*{1,2}.fastq.gz"
  singleEnd = false
  outdir = './results'

  reference_base = '/mnt/beegfs/database/bioinfo/rnafusion_references'
  igenomes_base = "${params.reference_base}/igenomes"
  // star index for 101bp reads by default
  star_index = "${params.igenomes_base}/Homo_sapiens/Ensembl/${params.genome}/Sequence/STARIndex/"
  fusioncatcher_ref = "${params.reference_base}/fusioncatcher_ref/human_v90"
  star_fusion_ref = "${params.reference_base}/star_fusion_ref/GRCh37_v19_CTAT_lib_Feb092018/ctat_genome_lib_build_dir/"
  ericscript_ref = "${params.reference_base}/ericscript_ref/ericscript_db_homosapiens_ensembl73"
  pizzly_fasta = "${params.reference_base}/pizzly_ref/Homo_sapiens.GRCh37.75.cdna.all.fa.gz"
  pizzly_gtf = "${params.reference_base}/pizzly_ref/Homo_sapiens.GRCh37.75.gtf"

  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  readPaths = null
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
// includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"
// Load config file for cluster flamingo
includeConfig 'conf/flamingo.config'

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity {
    singularity.enabled = true
    includeConfig 'conf/singularity.config'
 }
  test {
    includeConfig 'conf/test.config'
  }
  munin_docker {
    singularity.enabled = false
    includeConfig 'conf/munin-docker.config'
  }

}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/rnafusion_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/rnafusion_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/rnafusion_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/rnafusion_dag.svg"
}

manifest {
  name = 'nf-core/rnafusion'
  description = 'Nextflow rnafusion analysis pipeline, part of the nf-core community.'
  homePage = 'https://github.com/nf-core/rnafusion'
  version = '1.0'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
